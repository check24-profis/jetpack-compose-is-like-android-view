&lt;androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recycler_view"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="@color/shared_colorBackground"
        app:layoutManager="androidx.recyclerview.widget.LinearLayoutManager"/&gt;

// Define a layout file for a singular item, one for each viewType

// Define two constants similar to this

    val CONTENT_TYPE = 0
    val TITLE_TYPE = 1

// Write Custom List Adapter

class DifferentViewAdapter :
    ListAdapter&lt;ExampleListItems, RecyclerView.ViewHolder&gt;(DifferentViewDiffCallback) {

    // Handle the Animations of deleted, changed items

    object DifferentViewDiffCallback : DiffUtil.ItemCallback&lt;ExampleListItems&gt;() {

        override fun areItemsTheSame(
            oldItem: ExampleListItems,
            newItem: ExampleListItems
        ): Boolean =
            oldItem.hashCode() == newItem.hashCode()

        override fun areContentsTheSame(
            oldItem: ExampleListItems,
            newItem: ExampleListItems
        ): Boolean =
            oldItem == newItem
    }

    // Create the matching ViewHolder for the current viewType

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
        return if (viewType == TITLE_TYPE)
            TitleViewHolder(
                TitleItemBinding.inflate(
                    LayoutInflater
                        .from(parent.context), parent, false
                ).root
            )
        else ContentViewHolder(
                ContentItemBinding.inflate(
                    LayoutInflater
                        .from(parent.context), parent, false
                    ).root
                )
            )
    }

    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
        if (holder is TitleViewHolder) {
            val titleItem = getItem(position) as ExampleListItems.TitleItem
            val binding = TitleItemBinding.bind(holder.itemView)

            binding.title.text = titleItem.title
        } else if (holder is ContentViewHolder) {
            val contentItem = getItem(position) as ExampleListItems.ContentItem
            val binding = ContentItemBinding.bind(holder.itemView)

            with(binding) {
                contentTitle.text = contentItem.title
                contentBody.text = contentItem.body
            }
        }
    }

    // Specify the viewType

    override fun getItemViewType(position: Int): Int {
        return if (getItem(position) is ExampleListItems.ContentItem) CONTENT_TYPE
        else TITLE_TYPE
    }

    class ContentViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)

    class TitleViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView)
}

// Set Adapter in Activity/Fragment and submit your data

class AndroidUIListWithDifferentViewsActivity : AppCompatActivity() {

    var binding: RecyclerViewListBinding? = null
    var adapter: DifferentViewAdapter? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        supportActionBar?.title = "Different View List"

        binding = RecyclerViewListBinding.inflate(LayoutInflater.from(this), null, false)
        setContentView(binding?.root)
        adapter = DifferentViewAdapter()
        binding?.recyclerViewList?.adapter = adapter

        val exampleList = mutableListOf(
            ExampleListItems.TitleItem("I am a title"),
            ExampleListItems.TitleItem("I am a title"),
            ExampleListItems.ContentItem("I am a title", "I am body"),
            ExampleListItems.TitleItem("I am a title")
        )

        adapter?.submitList(exampleList)
    }
}